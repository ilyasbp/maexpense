//
//  ExpensePresenter.swift
//  Maexpense
//
//  Created by Ilyas Bintang Prayogi on 17/03/24.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class ExpensePresenter {
    
    // MARK: - Private properties -

    private unowned let view: ExpenseViewInterface
    private let interactor: ExpenseInteractorInterface
    private let wireframe: ExpenseWireframeInterface
    private var monthPortofolio: [MonthPortoDatum] = []

    // MARK: - Lifecycle -

    init(view: ExpenseViewInterface, interactor: ExpenseInteractorInterface, wireframe: ExpenseWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension ExpensePresenter: ExpensePresenterInterface {
    func handleChartSelection(index: Int) {
        wireframe.goToDetail(data: monthPortofolio[index])
    }
    
    func presentPortofolio() {
        interactor.fetchPortofolio(){ [weak self] portofolio in
            guard let self = self else { return }
            self.view.displayDonutChart(data: portofolio.monthPorto?.data ?? [])
            self.view.displayLineChart(data: portofolio.yearPorto?.data?.month ?? [])
            self.monthPortofolio = portofolio.monthPorto?.data ?? []
        }
        
        interactor.fetchPortofolioService() { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                print("Response: \(response)")
                self.view.displayDonutChart(data: response.monthPorto?.data ?? [])
                self.view.displayLineChart(data: response.yearPorto?.data?.month ?? [])
                self.monthPortofolio = response.monthPorto?.data ?? []
            case .failure(let error):
                self.view.displayError(errorMsg: error.errorDescription ?? "Terjadi kesalahan server")
            }
            
        }
    }
}
